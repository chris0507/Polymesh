#![cfg_attr(not(feature = "std"), no_std)]

pub mod constants;

pub mod traits;
pub use traits::{
    asset, balances, compliance_manager, exemption, governance_group, group, identity, multisig,
    CommonTrait,
};

pub mod context;
pub use context::Context;

pub mod batch_dispatch_info;
pub use batch_dispatch_info::BatchDispatchInfo;

pub mod protocol_fee;
pub use protocol_fee::ChargeProtocolFee;

use core::convert::From;
use polymesh_primitives::IdentityId;

/// It defines the valid issuers for Systematic Claims.
///
/// Systematic claims are claims generated by the system itself, and they are removed automatically
/// too.
///
/// There is just one Systematic claim at the moment, and It is generated by two issuers.
/// It is a CDD claim that is assigned to members of specific groups:
/// * Governance Committee: Each member of the committee has a CDD claim generated by
/// `SystematicIssuers::Committee` in order to allow it to operate independently of
/// claims generated by CDD trusted providers. Using that claim, GC members could operate even if
/// their CDD claim's issuer has been revoked.
/// * CDD Service Providers: Every CDD providers has a CDD claim generated by
/// `SystematicIssuers::CDDProvider` group, in order to avoid self-generated claim issue.
#[derive(Debug, Clone, Copy)]
pub enum SystematicIssuers {
    Committee,
    CDDProvider,
    TreasuryModule,
}

impl SystematicIssuers {
    /// It returns the representation of this issuer as a raw public key.
    pub fn as_bytes(self) -> &'static [u8; 32] {
        use constants::did::{CDD_PROVIDERS_DID, GOVERNANCE_COMMITTEE_DID, TREASURY_MODULE_DID};

        match self {
            SystematicIssuers::Committee => GOVERNANCE_COMMITTEE_DID,
            SystematicIssuers::CDDProvider => CDD_PROVIDERS_DID,
            SystematicIssuers::TreasuryModule => TREASURY_MODULE_DID,
        }
    }

    /// It returns the Identity Identifier of this issuer.
    pub fn as_id(self) -> IdentityId {
        IdentityId::from(*self.as_bytes())
    }
}
